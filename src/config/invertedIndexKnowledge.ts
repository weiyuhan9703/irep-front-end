/**
 * 倒排索引实验--温故知新富文本数据
 */
export const invertedIndexKnowledge = [
  {
    title: '介绍',
    content: `<p style="text-indent: 2em;">
                倒排索引（inverted index）也常被称为反向索引、置入档案或反向档案，是一种索引方法，被用来存储在全文搜索下某个单词在一个文档或者一组文档中的存储位置的映射。它是文档检索系统中最常用的数据结构。通过倒排索引，可以根据单词快速获取包含这个单词的文档列表。倒排索引主要由两个部分组成：&ldquo;词项词典（dictionary）&rdquo;和&ldquo;全体倒排记录表（postings）&rdquo;。每个词项都所对应的记录出现该词的文档列表称为倒排记录表（posting list）或倒排表（inverted list）。
              </p>
              <p style="text-indent: 2em;">
                倒排表中每个元素记录的是该词项在此元素中的出现信息（包括出现次数和出现位置），主要包含有：
              </p>
              <p>文档频率（document frequency）：出现某词项的文档数目，也就是每个倒排记录表的长度。</p>
              <p>词项频率（term frequency）：词项在文档中出现的次数。</p>
              <p>位置信息索引（positional index）：简称位置索引，倒排记录中特定词项出现在特定文档的中位置信息。</p>
              <p style="text-indent: 2em;">
                建立倒排索引的主要步骤：收集待建索引的文档、对这些文档中文本进行词条化、对词条进行语言学预处理，得到词项、根据词项对所有文档建立索引。从技术层面去分析，构造一个倒排索引，主要分为两部分： term词项构造和倒排记录表的构建。
              </p>`
  },
  {
    title: 'term词项构造',
    content: `<p style="text-indent: 2em;">
                词项构造是在构建索引过程中必不可或缺的一个步骤，词项构造效果的好坏往往会直接影响到用户的搜索体验，以及搜索结果的召回。该过程主要是利用分词系统将文档中的各项属性的文本信息拆分成一些表意较强且重要的词汇，便于用户查找。
              </p>
              <p style="text-indent: 2em;">
                （1）文本词条化一段文本信息，它本身是一个由语言组成的字符串系列，本项技术点的主要任务是将一段连续的文本序列信息拆分成多个子序列。它与语言本身相关，面对不同的语言，处理文本的方式往往会不一样。对于中文，由于其语言多歧义且表意紧凑的特性，在实际应用中，一般需要借助NLP的相关技术对内容进行特征抽取，甚至人工标注等，生成对应的词典，随后再基于词典利用分词器进行分词，才能看到较好的文本词条效果。而对于英文，普遍的英文句子，段落内容，它会以空格符作为单词之间的分隔符，所以一般情况下，以空格符对英文内容进行拆分，已经可以取得比较好的效果，不过英文中也会存在一些特殊模式，如带上撇号的格式&mdash;&mdash;&ldquo;Teacher&rsquo;s office&rdquo;，连字符格式&mdash;&mdash;&ldquo;English-speaking&rdquo;,也需要进行对应的处理，把单词提取出来。
              </p>
              <p style="text-indent: 2em;">
                （2）停用词过滤停用词是指在文档列表中出现的频数较高且价值不大的词。以英文为例，在英文文档中出现次数较多的停用词如：&rdquo;is&rdquo;、&rdquo;the&rdquo;、&rdquo;I&rdquo;、&ldquo;and&rdquo;、&rdquo;me&rdquo;等等；这一类词语在往往出现在所有文档中，若以此类词语为term进行索引构建，则会产生多个全量文档索引列表。停用词过滤的使用往往依赖于实际使用场景，关键字查询使用得较为频繁的场景如某一个电商品牌的垂直型搜索引擎，一个合适的停用词表显得尤为重要；而对于Web搜索引擎如百度、Google等，该类型的搜索引擎面向的查询场景较多，通用性较强，往往不需要停用词过滤。
              </p>
              <p style="text-indent: 2em;">
                （3）词条归一化基于上述两点，将文档内容转换成一个或多个term后，在查询时，最理想的情况是用户输入的关键字刚好与term完全匹配，实际上，很多时候用户输入的query与词条之间往往不会完全匹配，而用户们还是希望query能与词条进行匹配，比如用户在查询&ldquo;color&rdquo;时，用户肯定也希望能看到关于&ldquo;colour&rdquo;的返回结果。词条归一化的任务就是将一些看起来不完全一致的词条划分为一个等价类，比如英式单词colour和美式单词color归为一类、Air-conditioner和airconditioner归为一类等等。这样，用户在查询时，只要对等价类中的任意单词进行搜索，都会返回包含等价类中的任意一个单词的文档。
              </p>
              <p style="text-indent: 2em;">
                （4）词干提取、词形还原这是词条规范化的两种重要方式，用于扩展检索范围。词干提取的主要思想是&ldquo;缩减&rdquo;，将词条转化为词干，如：将&ldquo;beaches&rdquo;处理成&ldquo;beach&rdquo;,将&ldquo;bananas&rdquo;处理成&ldquo;banana&rdquo;等；词形还原的主要思想是&ldquo;转换&rdquo;，如：将&ldquo;doing&rdquo;、&ldquo;done&rdquo;、&ldquo;did&rdquo;转化成原型&ldquo;do&rdquo;，将&ldquo;given&rdquo;、&ldquo;gave&rdquo;转化成原型&ldquo;give&rdquo;等；词干提取的实现方法一般是基于规则对词条后缀进行缩减，至于词形还原，其实现方法需要词典来进行词形变化的映射；基于在此结合词条归一化技术，对扩展检索范围会产生一定的正向作用。
              </p>`
  },
  {
    title: '倒排记录表的构建',
    content: `<p style="text-indent: 2em;">
                从业务应用场景的角度出发，倒排记录表的构建方法主要有：单遍扫描和多遍扫描；从工程角度出发，倒排记录表的构建方法主要有：分布式构建和动态构建。
              </p>
              <p style="text-indent: 2em;">（1）单遍扫描构建</p>
              <p style="text-indent: 2em;">
                顾名思义，单遍扫描指的是仅对文档集合进行一次遍历，即可完成倒排索引的构建。由于内存开销问题，会将全量文档集进行分割，转换成几个内存大小相同的文档集合，然后依次执行前文中提及到的构建方法。该方法能快速构建一个简单可行的倒排索引，帮助用户通过关键字匹配快速找到目标文档。
              </p>
              <p style="text-indent: 2em;">（2）多遍扫描构建</p>
              <p style="text-indent: 2em;">
                多遍扫描主要用于构建索引时获取关于文档的更多相关信息，如一些词项TF-IDF指标、词频、文档内容关系等，以丰富倒排记录表的内容，为搜索引擎进行功能扩充；在工业流水线上，单遍扫描构建索引由于其查询类型的丰富度不够，显然已经不能满足广大用户的需求了。搜索用户的需求并不止于关键字查询，像短语查询、模糊查询、精确筛选、模糊筛选、排序、聚合统计等等需求。这意味着我们在构建倒排列表时要尽可能获取文档的更多信息，便于查询时的微运算、重排序、相关性分析等技术需求。
              </p>
              <p style="text-indent: 2em;">（3）分布式构建</p>
              <p style="text-indent: 2em;">
                对于一些大型搜索引擎如Web搜索引擎，单台机器已无法支撑其索引构建，需要多台机器组成集群对其进行分布式处理，将构建成的倒排索引进行分割，分布在多台机器上，每台机器各自形成独立的索引结构。当用户发出请求时，会有多台机器响应，并且根据用户的搜索需求在各自的索引结构进行查询，返回相关结果，再将所有结果在内存中进行集中处理，最后把处理过的最优结果返回给用户。在具体的实现过程中，工程师们往往更钟情于一些通用的面向大规模机器计算的分布式架构如Hadoop中的MapReduce、Java中的Fork/join架构等，极大地提高了软件开发效率。
              </p>
              <p style="text-indent: 2em;">（4）动态构建</p>
              <p style="text-indent: 2em;">
                该方法中的文档集合是变化的，这要求在对文档集进行索引构建时也要对文档的更新进行自适应。此问题常见于电商领域里，如商品的上下架、商品内容的更新等，都会引发索引的动态更新问题。于此，我们常采取一些策略型方法来解决该类型的问题，提高索引的实时性。
              </p>`
  }
]
